{"version":3,"sources":["Game.js","index.js"],"names":["Game","useState","round","setRound","selected","setSelected","display","setDisplay","gameOver","setGameOver","gameDisplay","setGameDisplay","score","setScore","count","setCount","position","setPosition","numArray","setNumArray","answer","data","correct","useEffect","numbers","nums","newArray","i","length","x","Math","floor","random","push","Set","console","log","generate","changeQuestion","next","showGameOver","showAnswer","className","style","question","onSubmit","event","preventDefault","setTimeout","incorrect","map","type","name","value","onChange","target","color","ReactDOM","render","document","getElementById"],"mappings":"oLAgJeA,G,MA5IF,WAAO,IAAD,EACWC,mBAAS,GADpB,mBACRC,EADQ,KACDC,EADC,OAEiBF,mBAAS,IAF1B,mBAERG,EAFQ,KAEEC,EAFF,OAGeJ,mBAAS,QAHxB,mBAGRK,EAHQ,KAGCC,EAHD,OAIiBN,mBAAS,SAJ1B,mBAIRO,EAJQ,KAIEC,EAJF,OAKuBR,mBAAS,QALhC,mBAKRS,EALQ,KAKKC,EALL,OAMWV,mBAAS,GANpB,mBAMRW,EANQ,KAMDC,EANC,OAOWZ,mBAAS,GAPpB,mBAORa,EAPQ,KAODC,EAPC,OAQiBd,mBAAS,GAR1B,mBAQRe,EARQ,KAQEC,EARF,OASiBhB,mBAAS,IAT1B,mBASRiB,EATQ,KASEC,EATF,KAWXC,EAASC,EAAKnB,GAAOoB,QAezBC,qBAAU,WACN,IAAMC,EAdO,WAGb,IAFA,IAAIC,EAAO,GACPC,EAAW,GACPC,EAAI,EAAGD,EAASE,QAAU,GAAID,IAAI,CACtC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,KAC9CN,EAAKQ,KAAKJ,GACVH,EAAQ,YAAO,IAAIQ,IAAIT,IAI3B,OAFAU,QAAQC,IAAIV,GACZS,QAAQC,MACDV,EAISW,GAChBlB,EAAY,YAAIK,MACjB,IAEH,IAUMc,EAAiB,WACnB/B,EAAW,QATXQ,EADsBD,EAAQ,GAY9B,IAAMyB,EAAOrB,EAASF,GACtBb,EAASoC,IAuBPC,EAAe,WAHjB7B,EADgB,UAQd8B,EAAa,WAZflC,EADqB,UAqCzB,OACI,gCACI,oBAAImC,UAAU,UAAd,wCACI,qBAAKA,UAAU,OAAOC,MAAO,CAACrC,QAASE,GAAvC,SACI,0LAER,sBAAKkC,UAAU,iBAAiBC,MAAO,CAACrC,QAASE,GAAjD,UACI,mCAAMM,EAAQ,EAAd,MAAoBO,EAAKnB,GAAO0C,YAChC,qBAAKF,UAAU,UAAf,SACI,sBAAKA,UAAU,QAAf,UACI,uBAAMG,SA9BN,SAACC,GACjBA,EAAMC,iBACNZ,QAAQC,IAAIhC,GAxCZa,EADoBD,EAAW,GA2C/B,IAAII,EAASC,EAAKnB,GAAOoB,QAOzB,GANAa,QAAQC,IAAIhB,GACThB,IAAagB,GA3BhBP,EADmBD,EAAQ,GA+B3BuB,QAAQC,IAAIxB,GACZ6B,IACa,IAAV3B,EAIC,OAHAqB,QAAQC,IAAI,aAtChB3B,EADoB,aAyChB+B,IAGJQ,WAAWV,EAAgB,OAaX,UACKjB,EAAKnB,GAAO+C,UAAUC,KAAI,SAAC9B,EAAQO,GAAT,OACvB,8BAAK,kCAAO,uBAAQwB,KAAK,QAAQC,KAAK,SAAiBC,MAAOjC,EAAQkC,SAAU,SAAAR,GAAK,OAAIzC,EAAYyC,EAAMS,OAAOF,SAA9D1B,GAAwEP,UAGhI,qBAAKsB,UAAU,QAAf,SACI,kCACI,uBAAOS,KAAK,QAAQC,KAAK,SAASC,MAAOhC,EAAKnB,GAAOoB,QAASgC,SAAU,SAAAR,GAAK,OAAIzC,EAAYyC,EAAMS,OAAOF,UACzGhC,EAAKnB,GAAOoB,aAGrB,qBAAKoB,UAAU,SAAf,SACI,uBAAOS,KAAK,SAASE,MAAM,gBAGnC,qBAAKX,UAAU,SAASC,MAAO,CAACrC,QAASA,GAAzC,SAEQc,GACI,8BAAK,mDAAsBA,SAIvC,2CAAcR,EAAd,oBAIZ,sBAAK8B,UAAU,YAAYC,MAAO,CAACrC,QAASI,EAAa8C,MAAO,WAAhE,UACI,kEACA,wDAA2B5C,EAA3B,kBCrIhB6C,IAASC,OAAQ,cAAC,EAAD,IAAUC,SAASC,eAAe,U","file":"static/js/main.807384b0.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport data from \"./Apprentice_TandemFor400_Data.json\";\nimport \"./game.css\";\n\nconst Game = () => {\n    const [round, setRound] = useState(1);\n    const [selected, setSelected] = useState(\"\");\n    const [display, setDisplay] = useState(\"none\");\n    const [gameOver, setGameOver] = useState(\"block\");\n    const [gameDisplay, setGameDisplay] = useState(\"none\");\n    const [score, setScore] = useState(0);\n    const [count, setCount] = useState(0);\n    const [position, setPosition] = useState(0);\n    const [numArray, setNumArray] = useState([]);\n\n    let answer = data[round].correct;\n\n    const generate = () => {\n        let nums = [];\n        let newArray = [];\n        for(let i = 0; newArray.length <= 10; i++){\n            let x = Math.floor(Math.random() * Math.floor(20));\n            nums.push(x);\n            newArray = [...new Set(nums)];\n        }\n        console.log(newArray);\n        console.log();\n        return newArray;\n    }\n\n    useEffect(() => {\n        const numbers = generate();\n        setNumArray([...numbers]);\n    }, []);\n\n    const countQuestions = () => {\n        const questionCount = count + 1;\n        setCount(questionCount);\n    }\n\n    const iterateOverArray = () => {\n        const newPosition = position + 1;\n        setPosition(newPosition);\n    }\n\n    const changeQuestion = () => {\n        setDisplay(\"none\");\n        countQuestions();\n        const next = numArray[position];\n        setRound(next);\n    }\n\n    const playGame = () => {\n        const playTheGame = \"none\";\n        setGameOver(playTheGame);\n    }\n\n    const displayScore = () => {\n        const userScores = score + 1;\n        setScore(userScores);\n    }\n\n    const changeDisplay = () => {\n        const blockDisplay = \"block\";\n        setDisplay(blockDisplay);\n    }\n\n    const gameOverDisplay = () => {\n        const endGame = \"block\";\n        setGameDisplay(endGame);\n    }\n\n    const showGameOver = () => {\n        gameOverDisplay();\n    }\n\n    const showAnswer = () => {\n        changeDisplay();\n    }\n\n    const clickSubmit = (event) => {\n        event.preventDefault();\n        console.log(selected);\n        iterateOverArray();\n        let answer = data[round].correct;\n        console.log(answer);\n        if(selected === answer){\n            displayScore();\n        }\n        console.log(score);\n        showAnswer();\n        if(count === 9){\n            console.log(\"game over\");\n            playGame();\n            showGameOver();\n            return;\n        }\n        setTimeout(changeQuestion, 1200);\n    };\n\n    return (\n        <div>\n            <h1 className=\"heading\">Let's Play a Trivia Game !</h1>\n                <div className=\"tips\" style={{display: gameOver}}>\n                    <h3>Important: If your intended answer is already selected, choose another option and then re-choose your intended answer to ensure a correct score count </h3>\n            </div>\n            <div className=\"card-container\" style={{display: gameOver}}>\n                <h1>Q{count + 1} : {data[round].question}</h1>\n                <div className=\"choices\">\n                    <div className=\"radio\">\n                        <form onSubmit={clickSubmit}>\n                            {data[round].incorrect.map((answer, i) => (\n                                <div><label><input  type=\"radio\" name=\"option\" key={i} value={answer} onChange={event => setSelected(event.target.value)}/>{answer}</label></div>\n                            ))}\n\n                            <div className=\"radio\">\n                                <label>\n                                    <input type=\"radio\" name=\"option\" value={data[round].correct} onChange={event => setSelected(event.target.value)} />\n                                    {data[round].correct}\n                                </label>\n                            </div>\n                            <div className=\"submit\">\n                                <input type=\"submit\" value=\"submit\"/>\n                            </div>\n                        </form>\n                        <div className=\"answer\" style={{display: display}}>\n                            {\n                                answer && (\n                                    <div><h1>Correct Answer : {answer}</h1></div>\n                                )\n                            }\n                        </div>\n                        <div>Score : {score} / 10 </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"game-over\" style={{display: gameDisplay, color: \"#961715\"}}>\n                <h1>Game Over , Thanks For playing !</h1>\n                <h2>Your Final Score is : {score} /10</h2>\n            </div>\n        </div>\n    )\n}\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./Game\";\n\n\nReactDOM.render( <Game />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}